global
  # Note that you will have to set up rsyslog to accept log messages.
  # See /doc/serverSetup.md
  log 127.0.0.1 local1 notice
  maxconn 4096
  user haproxy
  group haproxy
  daemon
  ca-base /etc/ssl
  crt-base /etc/ssl

defaults
  log global
  maxconn 4096
  mode http
  option http-server-close
  timeout connect 5s
  timeout client 30s
  timeout server 30s
  # Long timeout for WebSocket connections.
  timeout tunnel 1h

frontend public
  # HTTP
  bind :80
  # Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }

  # HTTPS
  # Example with CA certificate bundle
  # bind :443 ssl crt cert.pem ca-file bundle.crt
  # Example without CA certification bunch
  bind :443 ssl crt snakeoil.pem

  # The node backends - websockets will be managed automatically, given the
  # right base paths to send them to the right Node.js backend.
  #
  # If you wanted to specifically send websocket traffic somewhere different
  # you'd use an ACL like { hdr(Upgrade) -i WebSocket }. That isn't the case
  # here, however.
  use_backend thywill_echo if { path_beg /echo/ }
  use_backend thywill_shapes if { path_beg /shapes/ }
  # Everything else to Nginx.
  default_backend nginx

backend thywill_echo
  server node1 127.0.0.1:10080

backend thywill_shapes
  server node1 127.0.0.1:10081

backend nginx
  server nginx1 127.0.0.1:8080

# A statistics server. Uncomment the frontend and backend below to enable it.
# Don't forget to allow TCP traffic on port 1936 through your firewall.
#
# frontend statistics
#   # HTTPS
#   # Example with CA certificate bundle
#   # bind :1936 ssl crt cert.pem ca-file bundle.crt
#   # Example without CA certification bunch
#   bind :1936 ssl crt snakeoil.pem
#
# backend stats
#   stats enable
#   stats hide-version
#   stats realm Haproxy\ Statistics
#   stats uri /
#   stats auth admin:password
